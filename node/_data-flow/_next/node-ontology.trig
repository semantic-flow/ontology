@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix mesh: <https://semantic-flow.github.io/ontology/mesh/> .
@prefix node: <https://semantic-flow.github.io/ontology/node/> .
@prefix flow: <https://semantic-flow.github.io/ontology/flow/> .

<> a owl:Ontology ;
    dcterms:title "Semantic Flow Node Ontology" ;
    dcterms:description "Node operations and behaviors for the Semantic Flow mesh, defining node handles, flows, and node-specific properties. The recommended prefix is 'node' (alternatives: 'sfnode', 'mesh-node', 'nodeops')." ;
    dcterms:creator "Semantic Flow Project" ;
    owl:versionInfo "0.1.0" ;
    mesh:preferredNamespacePrefix "node" ;
    mesh:alternateNamespacePrefix "sfnode", "mesh-node", "nodeops" .

#################################################################
#    Classes
#################################################################

node:Handle a owl:Class ;
    rdfs:subClassOf mesh:Element, mesh:FolderResource ;
    rdfs:label "Handle" ;
    rdfs:comment "Node handles have an interest referent: their parent node 'as a node' (as opposed to the thing/concept referred to by the parent)." .

node:Namespace a owl:Class ;
    rdfs:subClassOf mesh:Node, mesh:FolderResource ;
    rdfs:label "Namespace" ;
    rdfs:comment "Containers for other nodes. Identifiers for NamespaceNodes don't refer to things or concepts other than themselves." .

node:Reference a owl:Class ;
    rdfs:subClassOf mesh:Node, mesh:FolderResource ;
    rdfs:label "Reference" ;
    rdfs:comment "Nodes refer to some 'thing' or concept other than themselves." .

node:Data a owl:Class ;
    rdfs:subClassOf mesh:Node, mesh:FolderResource ;
    rdfs:label "Data" ;
    rdfs:comment "Nodes that provide 'payload data'." .

node:Flow a owl:Class ;
    rdfs:subClassOf dcat:DatasetSeries, mesh:Resource ;
    rdfs:label "Flow" ;
    rdfs:comment "Abstract evolvable datasets for node metadata, reference data, payload data, and configuration data. Node flows are realized through flow snapshots that represent specific states or versions, so they are DatasetSeries." .


#################################################################
#    Object Properties
#################################################################

node:hasElement a owl:ObjectProperty ;
    rdfs:domain node:Handle ;
    rdfs:range mesh:Element ;
    rdfs:label "hasElement" ;
    rdfs:comment "Associates nodes with their supporting elements." .

node:isHandleFor a owl:ObjectProperty ;
    rdfs:domain node:Handle ;
    rdfs:range node:Handle ;
    rdfs:label "isHandleFor" ;
    rdfs:comment "Indicates that a handle element provides identification and routing for a specific node. This property enables location-independent node access." .

node:hasHandle a owl:ObjectProperty ;
    rdfs:domain node:Handle ;
    rdfs:range node:Handle ;
    rdfs:label "hasHandle" ;
    rdfs:comment "Associates a mesh node with its persistent handle identifier. This property enables node addressing without overloading the node's canonical, potentially-referring URL." .

node:hasFlow a owl:ObjectProperty ;
    rdfs:domain node:Handle ;
    rdfs:range node:Flow ;
    rdfs:label "hasFlow" ;
    rdfs:comment "Links mesh nodes to their flows." .

#################################################################
#    Data Properties
#################################################################

#################################################################
#    Disjointness Axioms
#################################################################

### Node types are disjoint
[ a owl:AllDisjointClasses ;
    owl:members ( node:Namespace node:Reference node:Data )
] .

### Element types include Handle and others from mesh ontology
[ a owl:AllDisjointClasses ;
    owl:members ( node:Handle mesh:AssetTree mesh:DocumentationResource )
] .

#################################################################
#    SHACL Constraints
#################################################################

# Abstract Classes
node:FlowShape a sh:NodeShape ;
    sh:targetClass node:Flow ;
    sh:not [ sh:class node:Flow ] ;
    sh:message "Flow is abstract - use a specific subclass" .

# Every Node gets a Handle
# This is tricky because usually the node would be referenced by its handle. Since node URIs have the special sense of a thing/concept, effectively we're saying that "the thing referenced by this node has a handle" instead of "this node has a handle".
node:NodeShape a sh:NodeShape ;
   sh:targetClass mesh:Node ;
   sh:property [
       sh:path node:hasHandle ;
       sh:class node:Handle ;
       sh:minCount 1 ;
       sh:maxCount 1 ;
       sh:message "Every Node must have exactly one Handle"
   ] .

# Every Node gets Config and Metadata flows through its handle(universal requirements)
node:HandleConfigShape a sh:NodeShape ;
   sh:targetClass node:Handle ;
   sh:property [
       sh:path flow:hasConfig ;
       sh:class flow:Config ;
       sh:minCount 1 ;
       sh:maxCount 1 ;
       sh:message "Every Handle must have exactly one Config flow"
   ] ;
   sh:property [
       sh:path flow:hasMetadata ;
       sh:class flow:Metadata ;
       sh:minCount 1 ;
       sh:maxCount 1 ;
       sh:message "Every Handle must have exactly one Metadata flow"
   ] .